{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.0.0-beta.1-73c4bed');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` and `_platforms` parameters to be made required.\n              private _ngZone?: NgZone,\n              private _platform?: Platform) {\n    super();\n\n    const element = _elementRef.nativeElement;\n    const bindEvent = () => {\n      fromEvent(element, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    };\n\n    // @breaking-change 8.0.0 remove null check once _ngZone is made into a required parameter.\n    if (_ngZone) {\n      // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n      _ngZone.runOutsideAngular(bindEvent);\n    } else {\n      bindEvent();\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 8.0.0 Remove null check for `platform`.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public _elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n    _focusMonitor.monitor(_elementRef);\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list' && _elementRef) {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList,\n              // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\n              _changeDetectorRef?: ChangeDetectorRef) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\n    if (this._list && _changeDetectorRef) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/material2/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","this","role","Number","tslib_1.__extends","type","Directive","args","selector","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","CdkTreeNode","useExisting","ElementRef","CdkTree","String","decorators","Attribute","Input","_MatTreeNodeMixinBase","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","IterableDiffers","node","nodeOutlet","ContentChildren","MatTreeNodeOutlet","descendants","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","styles","encapsulation","ViewEncapsulation","None","propDecorators","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","ComponentFactoryResolver","ViewContainerRef","MatTabBody","Inject","forwardRef","MatTabBodyPortal","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","Subscription","EMPTY","_translateTabComplete","Subject","_onCentering","EventEmitter","_beforeCentering","_afterLeavingCenter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","_isCenterPosition","_position","emit","position","_positionIndex","ngOnInit","origin","_computePositionFromOrigin","unsubscribe","complete","_onTranslateTabStarted","isCentering","nativeElement","clientHeight","_getLayoutDirection","changeDetection","ChangeDetectionStrategy","OnPush","animations","matTabsAnimations","translateTab","ChangeDetectorRef","Output","_portalHost","ViewChild","PortalHostDirective","static","_content","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","element","bindEvent","fromEvent","takeUntil","_stopInterval","runOutsideAngular","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","style","transform","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","_node","mixinTabIndex","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","_stringLabel","label","MatStepLabel","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","state","errorMessage","iconOverrides","selected","disableRipple","matStepperAnimations","horizontalStepTransition","trigger","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","_animationDone","CdkStepper","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","(click)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_validateDrawers","_updateContentMargins","_element","_drawers","drawer","_end","throwMatDuplicatedDrawerError","_start","_right","_left","MatDrawerContainer","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","close","_isShowingBackdrop","_isDrawerOpen","mode","_width","opened","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","MatProgressSpinner","diameters","Set","BASE_SIZE","styleTag","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","animationMode","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","ESCAPE","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","viewportRuler","_doCheckSubject","_autosize","defaultAutosize","_backdropOverride","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","debounceTime","ngDoCheck","_setContainerClass","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","diameter","strokeWidth","animationClass","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","MatMenuTrigger","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","MatMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","MatListOption","_setSelected","selectionList","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","colorChanges","firstChange","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","MAT_MENU_SCROLL_STRATEGY_FACTORY","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","_hasFocus","_color","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","MatExpansionPanelHeader","hideToggle","displayMode","MatAccordion","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[class.mat-chip-list-required]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_chipListMultiple","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_syncChipsState","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_placeholderChild","MatPlaceholder","_labelChild","MatLabel","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","_createBadgeElement","rootNode","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}